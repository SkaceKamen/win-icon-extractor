// koffee 0.56.0
var HANDLE, IntPtr, bitmapInfo, bitmapInfoHeader, bmp_js, ffi, fs, gdi32, i, iconInfo, j, jimp, loadBitmap, lpctstr, palleteColor, path, ref, shell32, struct, user32;

path = require('path');

ffi = require('ffi-napi');

ref = require('ref');

struct = require('ref-struct');

fs = require('fs');

jimp = require('jimp');

bmp_js = require('bmp-js');

IntPtr = ref.refType(ref.types.int);

HANDLE = ref.refType(ref.types["void"]);

lpctstr = {
    indirection: 1,
    name: 'lpctstr',
    size: ref.sizeof.pointer,
    ffi_type: ffi.types.CString.ffi_type,
    get: function(buffer, offset) {
        var _buf;
        _buf = buffer.readPointer(offset);
        if (_buf.isNull()) {
            return null;
        }
        return _buf.readCString(0);
    },
    set: function(buffer, offset, value) {
        var _buf;
        _buf = Buffer.alloc(Buffer.byteLength(value, 'ucs2') + 2);
        _buf.write(value, 'ucs2');
        _buf[_buf.length - 2] = 0;
        _buf[_buf.length - 1] = 0;
        return buffer.writePointer(_buf, offset);
    }
};

iconInfo = struct({
    fIcon: ref.types.bool,
    xHotspot: ref.types.ulong,
    yHotspot: ref.types.ulong,
    hbmMask: HANDLE,
    hbmColor: HANDLE
});

bitmapInfoHeader = struct({
    biSize: ref.types.ulong,
    biWidth: ref.types.long,
    biHeight: ref.types.long,
    biPlanes: ref.types.ushort,
    biBitCount: ref.types.ushort,
    biCompression: ref.types.ulong,
    biSizeImage: ref.types.ulong,
    biXPelsPerMeter: ref.types.long,
    biYPelsPerMeter: ref.types.long,
    biClrUsed: ref.types.ulong,
    biClrImportant: ref.types.ulong
});

palleteColor = struct({
    red: ref.types.uint8,
    greed: ref.types.uint8,
    blue: ref.types.uint8,
    "void": ref.types.uint8
});

bitmapInfo = struct({
    bmiHeader: bitmapInfoHeader
});

for (i = j = 0; j < 16; i = ++j) {
    bitmapInfo.defineProperty('color' + i, palleteColor);
}

shell32 = ffi.Library('shell32', {
    ExtractAssociatedIconW: ["void *", [IntPtr, lpctstr, IntPtr]]
});

gdi32 = ffi.Library('gdi32', {
    GetDIBits: [ref.types.int32, [IntPtr, IntPtr, 'uint32', 'uint32', IntPtr, ref.refType(bitmapInfo), 'uint32']]
});

user32 = ffi.Library('user32', {
    GetIconInfo: ['bool', [IntPtr, ref.refType(iconInfo)]],
    GetDC: [HANDLE, [IntPtr]],
    DestroyIcon: ['bool', [HANDLE]]
});

loadBitmap = function(hbitmap, ident) {
    var bitmap, colors, data, dc, header;
    bitmap = new bitmapInfo();
    bitmap['ref.buffer'].fill(0);
    bitmap.bmiHeader.biSize = 40;
    dc = user32.GetDC(null);
    if (dc.deref() === 0) {
        throw new Error("Failed to get screen DC.");
    }
    if (gdi32.GetDIBits(dc, hbitmap, 0, 0, null, bitmap.ref(), 0) === 0) {
        throw new Error("Failed to load BITMAP (" + ident + ") info.");
    }
    colors = bitmap.bmiHeader.biBitCount < 24 && ((1 << bitmap.bmiHeader.biBitCount) * 4) || 0;
    bitmap['ref.buffer'] = bitmap['ref.buffer'].slice(0, bitmap.bmiHeader.biSize + colors);
    bitmap.bmiHeader.biCompression = 0;
    data = Buffer.alloc(bitmap.bmiHeader.biSizeImage);
    if (gdi32.GetDIBits(dc, hbitmap, 0, bitmap.bmiHeader.biHeight, data, bitmap.ref(), 0) === 0) {
        throw new Error("Failed to load BITMAP data.");
    }
    header = Buffer.alloc(2 + 4 + 4 + 4);
    header.writeUInt8(66, 0);
    header.writeUInt8(77, 1);
    header.writeUInt32LE(data.byteLength + 54 + colors, 2);
    header.writeUInt32LE(0, 6);
    header.writeUInt32LE(54 + colors, 10);
    return {
        data: Buffer.concat([header, bitmap.ref(), data]),
        depth: bitmap.bmiHeader.biBitCount
    };
};

module.exports = function(target) {
    return new Promise((function(_this) {
        return function(resolve, reject) {
            var colored, colored_bmp, iconIndex, info, mask, mask_bmp, result;
            target = path.resolve(target);
            iconIndex = ref.alloc(ref.types.int32, 0);
            info = new iconInfo();
            info['ref.buffer'].fill(0);
            result = shell32.ExtractAssociatedIconW(null, target, iconIndex);
            if (!user32.GetIconInfo(result, info.ref())) {
                throw new Error("Failed to load icon info.");
            }
            colored = loadBitmap(info.hbmColor, 'colored');
            mask = loadBitmap(info.hbmMask, 'mask');
            user32.DestroyIcon(result);
            colored_bmp = bmp_js.decode(colored.data);
            mask_bmp = bmp_js.decode(mask.data);
            return jimp.read(bmp_js.encode(colored_bmp).data, function(err, colored_img) {
                var has_alpha, index, k, l, ref1, ref2, xx, yy;
                if (err) {
                    return reject(err);
                }
                has_alpha = false;
                if (colored.depth > 24) {
                    for (xx = k = 0, ref1 = colored_bmp.width; 0 <= ref1 ? k < ref1 : k > ref1; xx = 0 <= ref1 ? ++k : --k) {
                        for (yy = l = 0, ref2 = colored_bmp.height; 0 <= ref2 ? l < ref2 : l > ref2; yy = 0 <= ref2 ? ++l : --l) {
                            index = colored_img.getPixelIndex(xx, yy);
                            if (colored_bmp.data[index + 3] !== 0) {
                                has_alpha = true;
                                break;
                            }
                        }
                    }
                }
                if (has_alpha) {
                    colored_img.bitmap = colored_bmp;
                    return colored_img.getBase64(jimp.MIME_PNG, function(error, base64) {
                        if (err) {
                            return reject(err);
                        }
                        return resolve(base64);
                    });
                } else {
                    return jimp.read(bmp_js.encode(mask_bmp).data, function(err, mask_img) {
                        var masked_img;
                        if (err) {
                            return reject(err);
                        }
                        masked_img = colored_img.mask(mask_img.invert(), 0, 0);
                        return masked_img.getBase64(jimp.MIME_PNG, function(error, base64) {
                            if (err) {
                                return reject(err);
                            }
                            return resolve(base64);
                        });
                    });
                }
            });
        };
    })(this));
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=index.coffee